// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using blogApp.Data;

#nullable disable

namespace blogApp.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231117172113_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.8");

            modelBuilder.Entity("blogApp.Data.Article", b =>
                {
                    b.Property<int>("ArticleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ArticleCategoryID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ArticleContent")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ArticleImage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ArticlePublicationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("ArticleTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ArticleWriterID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ArticleID");

                    b.HasIndex("ArticleCategoryID");

                    b.HasIndex("ArticleWriterID");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("blogApp.Data.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("blogApp.Data.Comment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CommentArticleID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CommentContent")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CommentPublicationTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("CommentWriterID")
                        .HasColumnType("INTEGER");

                    b.HasKey("CommentID");

                    b.HasIndex("CommentArticleID");

                    b.HasIndex("CommentWriterID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("blogApp.Data.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserMail")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserPassword")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserRole")
                        .HasColumnType("TEXT");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("blogApp.Data.Article", b =>
                {
                    b.HasOne("blogApp.Data.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("ArticleCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("blogApp.Data.User", "ArticleWriter")
                        .WithMany("Articles")
                        .HasForeignKey("ArticleWriterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArticleWriter");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("blogApp.Data.Comment", b =>
                {
                    b.HasOne("blogApp.Data.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("CommentArticleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("blogApp.Data.User", "CommentWriter")
                        .WithMany()
                        .HasForeignKey("CommentWriterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("CommentWriter");
                });

            modelBuilder.Entity("blogApp.Data.Article", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("blogApp.Data.Category", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("blogApp.Data.User", b =>
                {
                    b.Navigation("Articles");
                });
#pragma warning restore 612, 618
        }
    }
}
